<!DOCTYPE html>
    <html lang="en">
    <head>
        <title>Corto Threejs</title>

        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <style>body { margin: 0px; overflow: hidden; }</style>
        <script src="js/three.js"></script>
        <script src="js/MTLLoader.js"></script>
        <script src="js/TrackballControls.js"></script>

        <!-- <script src="js/corto.js"></script> -->
        <script src="js/corto/attribute.js"></script>
        <script src="js/corto/tunstall.js"></script>
        <script src="js/corto/cortodecoder.js"></script>
        <script src="js/corto/CORTOLoader.js"></script>

    </head>

<body>
    <div id="container"></div>
    <p style="position:absolute; top:10px; left:10px; color:white;" id="stats">N vert: <span id="nvert"></span><br/>N triangles: <span id="nface"></span><br/> Decompression timings: <span id="timing"></span></p>
</body>

<script>

    var camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 0.1, 100 );
    camera.position.z = 4;

    var controls = new THREE.TrackballControls( camera );
    controls.rotateSpeed = 10.0;
    controls.zoomSpeed = 1.5;
    controls.panSpeed = 0.8;
    controls.noZoom = false;
    controls.noPan = false;
    controls.staticMoving = true;
    controls.dynamicDampingFactor = 0.3;
    controls.keys = [ 65, 83, 68 ];
    controls.addEventListener( 'change', render );

    var scene = new THREE.Scene();
    scene.fog = new THREE.Fog( 0x050505, 2000, 3500 );
    var ambient = new THREE.AmbientLight( 0xffffff, 0.3 );
    scene.add( ambient);

    var light1 = new THREE.DirectionalLight( 0xffffff, 1.0 );
    light1.position.set( 1, 1, -0.5 );
    scene.add( light1 );

    var light2 = new THREE.DirectionalLight( 0xffffff, 1.0 );
    light2.position.set( -1, -0.5, 1 );
    scene.add( light2 );

    var renderer = new THREE.WebGLRenderer( { antialias: false } );
    renderer.setClearColor( scene.fog.color );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight);

    var container = document.getElementById( 'container');
    container.appendChild( renderer.domElement );

    function getURLParameter(name) {
        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\+/g, '%20')) || null;
    }

    var model = getURLParameter('model');
    var path = getURLParameter('path');

    if(!path) 
        path = 'models/';
    if(!model) 
        model = 'bunny.crt';

    var loader = new THREE.CORTOLoader({ path: path }); //can pass a material or a multimaterial if you know whats' in the model.

    var decode_times = [];
    var blob = null;

    loader.load(model, function(mesh) {
        decode_times.push(loader.decode_time);
        blob = loader.blob;

        mesh.addEventListener("change", render);

        mesh.geometry.computeBoundingBox();
        if(!mesh.geometry.attributes.normal) {
            if(!mesh.geometry.attributes.uv) {
                mesh.geometry.computeVertexNormals();
            }
            else ambient.intensity = 1.0;
        }


        mesh.geometry.center();
        mesh.scale.divideScalar(mesh.geometry.boundingBox.getSize().length());
        scene.add(mesh); 

        render();

        setTimeout(profile, 10);
    } );



    window.addEventListener( 'resize', onWindowResize, false );
    render();


    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

        controls.handleResize();
        controls.update();
        render();
    }

    function animate() {
        requestAnimationFrame( animate );
        controls.update();
    }

    function render() {
        renderer.render( scene, camera );
    }

    function profile() {

        var now = performance.now();
        var decoder = new CortoDecoder(blob);
        var model = decoder.decode();
        var ms = performance.now() - now;
        decode_times.push(ms);
        console.log((model.nvert/1024.0).toFixed(1) + "KV", ms.toFixed(1) + "ms", ((model.nvert/1000)/ms).toFixed(2) + "MV/s");


        var nvert = document.getElementById("nvert");
        nvert.innerHTML= model.nvert;

        var nface = document.getElementById("nface");
        nface.innerHTML= model.nface;

        var timing = document.getElementById("timing");
        if(decode_times.length == 2)
            timing.innerHTML += " " + decode_times[0].toFixed(0) + "ms";
        timing.innerHTML += " " + decode_times[decode_times.length-1].toFixed(0) + "ms";

        if(decode_times.length < 10) {
            setTimeout(profile, 10);
        } else {
            var avg = 0;
            for(var i = 0; i < decode_times.length; i++)
                avg += decode_times[i];
            avg /= decode_times.length;
            timing.innerHTML += "<br/ >Avg: " + avg.toFixed(0) + "ms";
            if(model.nface > 0)
                timing.innerHTML += "<br/ >Million Triangles per second: " + ((model.nface/1000)/avg).toFixed(2);
            else
                timing.innerHTML += "<br/ >Million Vertices per second: " + ((model.nvert/1000)/avg).toFixed(2);
        }
    }

    animate();

</script>


</html>

